#ifndef CPP_H
#define CPP_H

#include "base.h"
#include <algorithm>
#include <system_error>

struct CppCodePrinter : CodePrinterBase
{
  static inline bool is_fd(const std::string& str)
    { return str == "posix::fd_t" || str == "fd_t"; }

  void print_open(void)
  {
    std::string header_name = relative_filename;
    std::transform(header_name.begin(), header_name.end(), header_name.begin(),
                   [](char l) { l = std::toupper(l); if(l < 'A' || l > 'Z') { l = '_'; } return l; });

    out << "// This file was generated by Incanto"
        << std::endl << "#ifndef " << header_name
        << std::endl << "#define " << header_name
        << std::endl
        << std::endl << "// POSIX"
        << std::endl << "#include <sys/types.h>"
        << std::endl
        << std::endl << "// STL"
        << std::endl << "#include <vector>"
        << std::endl << "#include <cstdint>"
        << std::endl
        << std::endl << "// PDTK"
        << std::endl << "#include <object.h>"
        << std::endl << "#include <socket.h>"
        << std::endl << "#include <cxxutils/vfifo.h>"
        << std::endl << "#include <cxxutils/hashing.h>"
        << std::endl << "#include <cxxutils/posix_helpers.h>"
        << std::endl;
    if(is_server)
    {
      out << std::endl << "class IncantoServerInterface : public ServerSocket"
          << std::endl << "{"
          << std::endl << "public:"
          << std::endl << "  IncantoServerInterface(void) noexcept"
          << std::endl << "  {"
          << std::endl << "    Object::connect(newPeerRequest, this, &IncantoServerInterface::request);"
          << std::endl << "    Object::connect(newPeerMessage, this, &IncantoServerInterface::receive);"
          << std::endl << "  }"
          << std::endl
          << std::endl << "  virtual bool peerChooser(posix::fd_t socket, const proccred_t& cred) noexcept = 0;"
          << std::endl
          << std::endl << "  void request(posix::fd_t socket, posix::sockaddr_t addr, proccred_t cred) noexcept"
          << std::endl << "  {"
          << std::endl << "    (void)addr;"
          << std::endl << "    if(peerChooser(socket, cred))"
          << std::endl << "      acceptPeerRequest(socket);"
          << std::endl << "    else"
          << std::endl << "      rejectPeerRequest(socket);"
          << std::endl << "  }";
    }
    else
    {
      out << std::endl << "class IncantoClientInterface : public ClientSocket"
          << std::endl << "{"
          << std::endl << "public:"
          << std::endl << "  IncantoClientInterface(void) noexcept";
      if(remote_functions.empty())
        out << " { }";
      else
        out << std::endl << "  { Object::connect(newMessage, this, &IncantoClientInterface::receive); }";
    }
  }

  void print_close(void)
  {
    out << std::endl << "};"
        << std::endl
        << std::endl << "#endif"
        << std::endl;
  }

  void print_remote(void)
  {
    if(remote_functions.empty())
      return;
    out << std::endl << "public:";

    for(function_descriptor& func : remote_functions)
    {
      out << std::endl << "  bool " << func.name << "(";

      if(is_server)
        func.arguments.push_front({"posix::fd_t", "socket"});

      for(auto pos = func.arguments.begin(); pos != func.arguments.end(); ++pos)
      {
        if(pos != func.arguments.begin())
          out << ", ";
        out << "const " << pos->type;
        if(pos->type.find("<") != std::string::npos || // if template OR
           pos->type.find("string") != std::string::npos) // if string
          out << "&";
        out << " " << pos->name;
      }

      out << ") const noexcept { return write(" << (is_server ? "socket, " : "") << "vfifo(\"RPC\", \"" << func.name << "\"";

      if(is_server)
        func.arguments.pop_front();

      for(auto& arg : func.arguments)
        if(!is_fd(arg.type))
          out << ", " << arg.name;

      out << "), ";

      int count = 0;
      for(auto& arg : func.arguments)
      {
        if(is_fd(arg.type))
        {
          if(count)
            throw(std::system_error(int(std::errc::invalid_argument), std::generic_category(), "Only one file descriptor can be passed per incantation."));
          ++count;
          out << arg.name;
        }
      }
      if(!count)
        out << "posix::invalid_descriptor";

      out << "); }";
    }
  }

  void print_local(void)
  {
    if(local_functions.empty())
      return;
    out << std::endl << "public:";
    for(function_descriptor& func : local_functions)
    {
      out << std::endl << "  signal<" << (is_server ? "posix::fd_t" : "");
      for(auto pos = func.arguments.begin(); pos != func.arguments.end(); ++pos)
      {
        if(is_server || pos != func.arguments.begin())
          out << ", ";
        out << pos->type;
      }
      out << "> " << func.name << ";";
    }

    out << std::endl << "private:"
        << std::endl << "  void receive(posix::fd_t socket, vfifo buffer, posix::fd_t fd) noexcept"
        << std::endl << "  {"
        << std::endl << "    (void)fd;"
        << std::endl << "    std::string str;"
        << std::endl << "    if(!(buffer >> str).hadError() && str == \"RPC\")"
        << std::endl << "    {"
        << std::endl << "      buffer >> str;"
        << std::endl << "      switch(hash(str))"
        << std::endl << "      {";

    for(function_descriptor& func : local_functions)
    {
      out << std::endl << "        case \"" << func.name << "\"_hash:"
          << std::endl << "        {";

      if(func.arguments.empty())
        out << std::endl << "          Object::enqueue(" << func.name  << (is_server ? ", socket" : "") << ");";
      else
      {
        out << std::endl << "          struct { ";
        for(auto& arg : func.arguments)
          if(!is_fd(arg.type))
            out << arg.type << " " << arg.name << "; ";
        out << "} val;"
            << std::endl << "          buffer";
        for(auto& arg : func.arguments)
          if(!is_fd(arg.type))
            out << " >> val." << arg.name;
        out << ";";
        out << std::endl << "          if(!buffer.hadError())"
            << std::endl << "            Object::enqueue(" << func.name  << (is_server ? ", socket" : "");

        for(auto& arg : func.arguments)
        {
          if(is_fd(arg.type))
            out << ", fd";
          else
            out << ", val." << arg.name;
        }
        out << ");";
      }
      out << std::endl << "        }"
          << std::endl << "        break;";
    }
    out << std::endl << "      }"
        << std::endl << "    }"
        << std::endl << "  }";
  }
};

#endif // CPP_H
